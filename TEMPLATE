#include "netutils.h"

#include "utils.h" // Functions like Clear_Screen
#include "uuid.h"

#include "colors.h"
#include "help.h"

#include <iostream>
#include <cstring>

#include <vector>
#include <map>

#include <thread>
#include <mutex>

#include <fstream>

#include <algorithm>



// Client Display End

// Networking Begin --------------------

// 0
static int Create_Socket() noexcept
{
	int serversocket = socket(AF_INET, SOCK_STREAM, 0);
	
	if (serversocket == -1)
	{
		std::cerr << "Failed to create socket\n";
		return -1;
	}
	return serversocket;
}

// 1
static bool Bind_Socket(const int& serversocket, const int port) noexcept
{
  struct sockaddr_in saddr;
  memset(&saddr, 0, sizeof(saddr));

  saddr.sin_family = AF_UNSPEC; //AF_INET;
  saddr.sin_port = htons(port);
  saddr.sin_addr.s_addr = INADDR_ANY;

	if (bind(serversocket, reinterpret_cast<struct sockaddr*>(&saddr), sizeof(saddr)) == -1)
	{
		std::cerr << "Error binding socket\n";
		close(serversocket);
		
		return false;
	}
	return true;
}

// 2
static bool Listen_Socket(const int& serversocket) noexcept
{
	if (listen(serversocket, 7) == -1)
	{
		std::cerr << "Error listening on socket\n";
		close(serversocket);
		return false;
	}
	return true;
}

// 3
static int Accept_Socket(const int& serversocket) noexcept
{
	int clientsocket = accept(serversocket, NULL, NULL);

	if (clientsocket == -1) 
	{
    std::cerr << "Error accepting client connection\n";
    return -1;
  }
	return clientsocket;
}
// Networking End --------------------

int main(const int argc, char **argv) noexcept
{
	if (argc != 2)
  {
    std::cerr << "Usage: " << argv[0] << " PORT\n";
    return 1;
  }

	int port = std::stoi(argv[1]); 
	
	// Functions Begin

	Utils::Clear_Screen();

	std::cout << "Triptych / 0xby73 - [*] Listener started > " << port << '\n';

	// Functions End
	int serversocket = Create_Socket();
	if (serversocket == -1)
	{
		return 1;
	}

	if (!Bind_Socket(serversocket, port))
	{
		return 1;
	}

	if (!Listen_Socket(serversocket))
	{
		return 1;
	}


	for (;;)
	{
  	int clientsocket = Accept_Socket(serversocket);
	  if (clientsocket == -1)
	  {
		    return 1;
	  }

		std::thread fortnite(Handle_Client, clientsocket);
		fortnite.detach();

	}

}
